{"name": "test_registration_001", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_UserProfile.Test_UserProfile object at 0x0000017701092E90>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fde07a19610e1a7bafff7bbfa3dd95a7\")>\n\n    def test_registration_001(self, setup):\n        self.driver = setup\n        self.log.info(\"*** opening browser***\")\n    \n        # self.driver = webdriver.Chrome()\n        # self.driver.maximize_window()\n        self.ur = UserProfile_Class(self.driver)\n        self.log.info(\"*** test_registration_001 is started***\")\n    \n        self.driver.get(self. Registration_url)\n        self.log.info(\"Go to url--> \" + self. Registration_url)\n        self.ur.Enter_Name(self.Name)\n    \n        #email = generate_email()\n        self.ur.Enter_Email(self.Username)\n        #print(email)\n    \n        self.log.info(\"enter email \")\n        self.ur.Enter_Password(self.Password)\n        self.log.info(\"password \")\n        self.ur.Enter_ConfirmPassword(self.Password)\n        self.ur.Click_login_or_Register_button()\n        self.log.info(\"click on Registration button \")\n    \n        if self.ur.Validation_login_or_Registration() == \"Registration or login  pass\":\n            self.log.info(\"test_registration_001 is Pass\")\n            self.driver.save_screenshot(\n                \"C:\\\\Babli\\\\python_revision_2\\\\Pytest_python_projects\\\\Pytest_credkart_project\\\\Screenshots\\\\Registration_pass.png\"\n            )\n            self.driver.close()\n            assert True\n        else:\n            self.log.error(\"test_registration_001 is Fail\")\n            self.driver.save_screenshot(\n                \"C:\\\\Babli\\\\python_revision_2\\\\Pytest_python_projects\\\\Pytest_credkart_project\\\\Screenshots\\\\Registration_fail.png\"\n            )\n            self.driver.close()\n>           assert False\nE           assert False\n\ntestCases\\test_UserProfile.py:55: AssertionError"}, "attachments": [{"name": "log", "source": "cba8e494-a239-4820-bcce-520ada5e857e-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "dbda5b09-8d6f-49a7-9d33-f51eb1caf5f5-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "64b46fd2-3efd-4606-979a-b21d4aa377d2-attachment.txt", "type": "text/plain"}], "start": 1704919507022, "stop": 1704919510556, "uuid": "e6c657bd-a342-4cd5-9ff1-b2fdd31ab029", "historyId": "587cd1add88feef010b1c33acaafac8f", "testCaseId": "587cd1add88feef010b1c33acaafac8f", "fullName": "testCases.test_UserProfile.Test_UserProfile#test_registration_001", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_UserProfile"}, {"name": "subSuite", "value": "Test_UserProfile"}, {"name": "host", "value": "Sonu"}, {"name": "thread", "value": "17144-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_UserProfile"}]}